// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createFact = `-- name: CreateFact :one
INSERT INTO facts (content, source) VALUES (?, ?)
RETURNING id, created_at, updated_at, deleted_at, content, source
`

type CreateFactParams struct {
	Content string
	Source  sql.NullString
}

func (q *Queries) CreateFact(ctx context.Context, arg CreateFactParams) (Fact, error) {
	row := q.db.QueryRowContext(ctx, createFact, arg.Content, arg.Source)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Source,
	)
	return i, err
}

const deleteFact = `-- name: DeleteFact :exec
DELETE FROM facts WHERE id = ?
`

func (q *Queries) DeleteFact(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFact, id)
	return err
}

const getFact = `-- name: GetFact :one
SELECT id, created_at, updated_at, deleted_at, content, source
FROM facts
WHERE id = ? AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetFact(ctx context.Context, id int64) (Fact, error) {
	row := q.db.QueryRowContext(ctx, getFact, id)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Source,
	)
	return i, err
}

const getFacts = `-- name: GetFacts :many
SELECT id, created_at, updated_at, deleted_at, content, source
FROM facts
WHERE deleted_at IS NULL
`

func (q *Queries) GetFacts(ctx context.Context) ([]Fact, error) {
	rows, err := q.db.QueryContext(ctx, getFacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fact
	for rows.Next() {
		var i Fact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomFact = `-- name: GetRandomFact :one
SELECT id, created_at, updated_at, deleted_at, content, source
FROM facts
WHERE deleted_at IS NULL
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomFact(ctx context.Context) (Fact, error) {
	row := q.db.QueryRowContext(ctx, getRandomFact)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Source,
	)
	return i, err
}
